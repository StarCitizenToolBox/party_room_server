// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: index.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IndexService_PingServer_FullMethodName   = "/IndexService/PingServer"
	IndexService_GetRoomTypes_FullMethodName = "/IndexService/GetRoomTypes"
	IndexService_CreateRoom_FullMethodName   = "/IndexService/CreateRoom"
	IndexService_GetRoomList_FullMethodName  = "/IndexService/GetRoomList"
	IndexService_TouchUser_FullMethodName    = "/IndexService/TouchUser"
)

// IndexServiceClient is the client API for IndexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexServiceClient interface {
	PingServer(ctx context.Context, in *PingData, opts ...grpc.CallOption) (*PingData, error)
	GetRoomTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoomTypesData, error)
	CreateRoom(ctx context.Context, in *RoomData, opts ...grpc.CallOption) (*RoomData, error)
	GetRoomList(ctx context.Context, in *RoomListPageReqData, opts ...grpc.CallOption) (*RoomListData, error)
	TouchUser(ctx context.Context, in *PreUser, opts ...grpc.CallOption) (*RoomData, error)
}

type indexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexServiceClient(cc grpc.ClientConnInterface) IndexServiceClient {
	return &indexServiceClient{cc}
}

func (c *indexServiceClient) PingServer(ctx context.Context, in *PingData, opts ...grpc.CallOption) (*PingData, error) {
	out := new(PingData)
	err := c.cc.Invoke(ctx, IndexService_PingServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) GetRoomTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoomTypesData, error) {
	out := new(RoomTypesData)
	err := c.cc.Invoke(ctx, IndexService_GetRoomTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) CreateRoom(ctx context.Context, in *RoomData, opts ...grpc.CallOption) (*RoomData, error) {
	out := new(RoomData)
	err := c.cc.Invoke(ctx, IndexService_CreateRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) GetRoomList(ctx context.Context, in *RoomListPageReqData, opts ...grpc.CallOption) (*RoomListData, error) {
	out := new(RoomListData)
	err := c.cc.Invoke(ctx, IndexService_GetRoomList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) TouchUser(ctx context.Context, in *PreUser, opts ...grpc.CallOption) (*RoomData, error) {
	out := new(RoomData)
	err := c.cc.Invoke(ctx, IndexService_TouchUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexServiceServer is the server API for IndexService service.
// All implementations must embed UnimplementedIndexServiceServer
// for forward compatibility
type IndexServiceServer interface {
	PingServer(context.Context, *PingData) (*PingData, error)
	GetRoomTypes(context.Context, *Empty) (*RoomTypesData, error)
	CreateRoom(context.Context, *RoomData) (*RoomData, error)
	GetRoomList(context.Context, *RoomListPageReqData) (*RoomListData, error)
	TouchUser(context.Context, *PreUser) (*RoomData, error)
	mustEmbedUnimplementedIndexServiceServer()
}

// UnimplementedIndexServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIndexServiceServer struct {
}

func (UnimplementedIndexServiceServer) PingServer(context.Context, *PingData) (*PingData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingServer not implemented")
}
func (UnimplementedIndexServiceServer) GetRoomTypes(context.Context, *Empty) (*RoomTypesData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomTypes not implemented")
}
func (UnimplementedIndexServiceServer) CreateRoom(context.Context, *RoomData) (*RoomData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedIndexServiceServer) GetRoomList(context.Context, *RoomListPageReqData) (*RoomListData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomList not implemented")
}
func (UnimplementedIndexServiceServer) TouchUser(context.Context, *PreUser) (*RoomData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TouchUser not implemented")
}
func (UnimplementedIndexServiceServer) mustEmbedUnimplementedIndexServiceServer() {}

// UnsafeIndexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexServiceServer will
// result in compilation errors.
type UnsafeIndexServiceServer interface {
	mustEmbedUnimplementedIndexServiceServer()
}

func RegisterIndexServiceServer(s grpc.ServiceRegistrar, srv IndexServiceServer) {
	s.RegisterService(&IndexService_ServiceDesc, srv)
}

func _IndexService_PingServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).PingServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_PingServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).PingServer(ctx, req.(*PingData))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_GetRoomTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).GetRoomTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_GetRoomTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).GetRoomTypes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).CreateRoom(ctx, req.(*RoomData))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_GetRoomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomListPageReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).GetRoomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_GetRoomList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).GetRoomList(ctx, req.(*RoomListPageReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_TouchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).TouchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_TouchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).TouchUser(ctx, req.(*PreUser))
	}
	return interceptor(ctx, in, info, handler)
}

// IndexService_ServiceDesc is the grpc.ServiceDesc for IndexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IndexService",
	HandlerType: (*IndexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingServer",
			Handler:    _IndexService_PingServer_Handler,
		},
		{
			MethodName: "GetRoomTypes",
			Handler:    _IndexService_GetRoomTypes_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _IndexService_CreateRoom_Handler,
		},
		{
			MethodName: "GetRoomList",
			Handler:    _IndexService_GetRoomList_Handler,
		},
		{
			MethodName: "TouchUser",
			Handler:    _IndexService_TouchUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "index.proto",
}
